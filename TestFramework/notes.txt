Goal: Write a unit testing framework for cpp programs

How? A test runner will take a queue of general form unit tests, run them and give feedback
What? A Unit test is a verification of all possible applications of the smallest possible unit; a single function

Integration: Errors need to be classified by the runner and uniformly communicated by the unit tests

Christoph's notes:
	Foobar.cpp:
		class Foobar(int age) {
			get/set age...
			addAge(int)
		}

	FoobarTest.cpp:
		class FoobarTest : UnitTest {
			Tests[] allTests() {
				return addAge_addingCorrectlyPositiveNumber, addAge_addingNegativeNumberShouldFail;
			}
			void addAge_addingCorrectlyPositiveNumber() {
				Foobar foo(22)
				foo.addAge(20)
				assert(foo.age == 42)
			}
			void addAge_addingNegativeNumberShouldFail() {
				Foobar foo(42)
				foo.addAge(-1) // expect this to raise an error somehow... => exceptions!
			}
		}


	// AAA notation; given when then

	testMain.cpp:
		int main() {
			TestRunner runner;
			runner.addTest(FoobarTest());
			runner.run();
		}

	EXPECTED REPORT if correct, just say "ok", maybe print a list of all test classes+methods
	if failed, print which test exactly (class+method), preferably which line, e.g.:
	============================================================================================================
	Running tests...
		FoobarTest...
			foobarAgeTest1 ✅
			foobarAgeTest2 ✅
			foobarAgeTest3 ❌

	Summary: Run 18 tests, 17 succeeded, 1 failed (took 235ms to execute)
	============================================================================================================

	class TestAssertionError : Exception { ... }

	assert(boolean value) {
		if(value == false) {
			throw TestAssertionError()
		}
	}

	class UnitTest {
		TestCase?[] allTests()
	}

	class TestRunner {
		private List<UnitTest> tests

		void addTest(UnitTest test) {
			tests.add(test);
		}

		void run() {
			List<string> resultSuccess;
			List<string> resultFail;
			forEach test in tests {
				TestCase[] testCases = test.allTests()
				forEach case in testCases {
					string testId = "test.name / case.name"
					try {
						case() // here there is the magic happening
						resultSuccess += testId
					} catch(TestAssertionError) {
						resultFail += testId
					}
				}
			}

			printReport(resultSuccess, resultFail); // implement me as private method
		}
	}